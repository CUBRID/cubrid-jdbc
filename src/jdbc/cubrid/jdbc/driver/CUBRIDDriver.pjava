/*
 * Copyright (C) 2008 Search Solution Corporation. All rights reserved by Search Solution.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of the <ORGANIZATION> nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

package @CUBRID_DRIVER@;

import java.sql.*;
import java.util.Properties;
import java.util.ArrayList;
import java.util.StringTokenizer;
import @CUBRID_DRIVER@.*;
import @CUBRID_JCI@.*;

#ifdef SERVER_SIDE_JDBC
 import com.cubrid.jsp.ExecuteThread;
#endif

/**
 * Title: CUBRID JDBC Driver Description:
 *
 * @version 2.0
 */

public class CUBRIDDriver implements Driver
{
  // version
  public static final int major_version = JDBC_DRIVER_MAJOR_VERSION;
  public static final int minor_version = JDBC_DRIVER_MINOR_VERSION;
  public static final int patch_version = JDBC_DRIVER_PATCH_VERSION;

#define makestr(s) #s
#define str(s) makestr(s)

  static final String build_serial_number = str(JDBC_DRIVER_SERIAL_NUMBER);

  // default connection informations
  public static final String default_hostname = "localhost";
  public static final int default_port = 30000;
  public static final String default_user = "public";
  public static final String default_password = "";

  private final static String CUBRID_JDBC_URL_HEADER = "jdbc:cubrid";
  private final static String JDBC_DEFAULT_CONNECTION = "jdbc:default:connection";
  private final static String CONNECTION_PROPERTY_CHARSET = "charset";
  private final static String CONNECTION_PROPERTY_ALTERNATIVE_HOSTS = "althosts";
  private final static String CONNECTION_PROPERTY_RECONNECTION_TIME = "rctime";
  private final static String[] params = {
    CONNECTION_PROPERTY_CHARSET, CONNECTION_PROPERTY_ALTERNATIVE_HOSTS,
    CONNECTION_PROPERTY_RECONNECTION_TIME };

  static
  {
    try
    {
      DriverManager.registerDriver(new CUBRIDDriver());
    }
    catch (SQLException e)
    {
    }
  }

    private boolean exValidKey(String key) throws Exception {
        String className = CUBRIDDriver.class.getName();
        String classSplit[] = className.split("\\.");
        String keySplit[] = key.split("\\-");
        if (!classSplit[0].equals(keySplit[0].toLowerCase())) {
            throw new Exception("Invalid URL");
        }

        if (classSplit[2].equals("oracle") || classSplit[2].equals("mysql")) {
            if (keySplit[1] != null && !classSplit[2].equals(keySplit[1].toLowerCase())) {
                throw new Exception("Invalid URL");
            }
        } else {
            if (keySplit.length != 1) {
                throw new Exception("Invalid URL");
            }
        }
        return true;
    }

    /*
     * java.sql.Driver interface
     */

    public Connection connect(String url, Properties info) throws SQLException {
        String magickey, hostname, db_name, dummy, conn_string, prop_string;
	String user = null, passwd = null;
        int prop_pos = 0;
        int port;
        Properties paramInfo;
        UConnection u_con;

        if (!acceptsURL(url))
            throw new CUBRIDException(CUBRIDJDBCErrorCode.invalid_url, url);

        if (url.toLowerCase().startsWith(JDBC_DEFAULT_CONNECTION)) {
            return defaultConnection();
        } else {
            // parse url
            try {
                prop_pos = url.indexOf('?');

                if (prop_pos != -1) {
                    conn_string = url.substring(0, prop_pos);
                    prop_string = url.substring(prop_pos, url.length());
                } else {
                    conn_string = url;
                    prop_string = null;
                }

                StringTokenizer tokenizer = new StringTokenizer(conn_string, ":", true);
                dummy = tokenizer.nextToken();
                if (dummy.equals(":")) {
                    throw new Exception("Invalid URL");
                } else {
                    tokenizer.nextToken();
                }

                magickey = tokenizer.nextToken();
                if (magickey.equals(":")) {
                    throw new Exception("Invalid URL");
                } else {
                    tokenizer.nextToken();
                    exValidKey(magickey);
                }

                hostname = tokenizer.nextToken();
                if (hostname.equals(":")) {
                    hostname = default_hostname;
                } else {
                    tokenizer.nextToken();
                }

                dummy = tokenizer.nextToken();
                if (dummy.equals(":")) {
                    port = default_port;
                } else {
                    port = Integer.parseInt(dummy);
                    tokenizer.nextToken();
                }

                db_name = tokenizer.nextToken();
                if (db_name.equals(":")) {
                    throw new CUBRIDException(CUBRIDJDBCErrorCode.no_dbname);
                } 
		
	        /* Both user and password are optional.
		 * Test if there are more tokens available to prevent NoSuchElementException.
		 */	
		if (tokenizer.hasMoreTokens()) {
			/* skip ':' */
			tokenizer.nextToken();
			if (tokenizer.hasMoreTokens()) {
				user = tokenizer.nextToken();
				if (user.equals(":")) {
					user = null;
				}
			}
		}
		if (tokenizer.hasMoreTokens()) {
			/* skip ':' */
			tokenizer.nextToken();
			if (tokenizer.hasMoreTokens()) {
				passwd = tokenizer.nextToken();
				if (passwd.equals(":")) {
					passwd = null;
				}
			}
		}

                paramInfo = make_param_info(prop_string);
            } catch (CUBRIDException e) {
                throw e;
            } catch (Exception e) {
                throw new CUBRIDException(CUBRIDJDBCErrorCode.invalid_url, url);
            }

            // getting informations from the Properties object
            dummy = info.getProperty("user");
            if (dummy != null) {
                user = dummy;
            }
            dummy = info.getProperty("password");
            if (dummy != null) {
                passwd = dummy;
            }

            if (user == null) {
                user = default_user;
            }
            if (passwd == null) {
                passwd = default_password;
            }

            dummy = info.getProperty(CONNECTION_PROPERTY_ALTERNATIVE_HOSTS);
            if (dummy == null) {
                dummy = paramInfo.getProperty(CONNECTION_PROPERTY_ALTERNATIVE_HOSTS);
            }
            if (dummy != null) {
                ArrayList<String> altHostList = new ArrayList<String>();
                altHostList.add(hostname + ":" + port);

                StringTokenizer st = new StringTokenizer(dummy, ",", false);
                while (st.hasMoreTokens()) {
                    altHostList.add(st.nextToken());
                }
                try {
                    u_con = UJCIManager.connect(altHostList, db_name, user, passwd, url);
                } catch (CUBRIDException e) {
                    throw e;
                }
            } else {
                try {
                    u_con = UJCIManager.connect(hostname, port, db_name, user, passwd, url);
                } catch (CUBRIDException e) {
                    throw e;
                }
            }

            dummy = info.getProperty(CONNECTION_PROPERTY_RECONNECTION_TIME);
            if (dummy == null) {
                dummy = paramInfo.getProperty(CONNECTION_PROPERTY_RECONNECTION_TIME);
            }
            if (dummy != null) {
                u_con.setReconnectionTime(Integer.valueOf(dummy).intValue());
            }

            dummy = info.getProperty(CONNECTION_PROPERTY_CHARSET);
            if (dummy == null) {
                dummy = paramInfo.getProperty(CONNECTION_PROPERTY_CHARSET);
            }
            if (dummy != null) {
                try {
                    u_con.setCharset(dummy);
                } catch (java.io.UnsupportedEncodingException e) {
                    throw new SQLException("UnsupportedEncodingException : " + dummy);
                }
            }
        }
        return new CUBRIDConnection(u_con, url, user);
    }

  public Connection defaultConnection() throws SQLException
  {
#ifdef SERVER_SIDE_JDBC
    ExecuteThread curThread = (ExecuteThread) Thread.currentThread();
    if (curThread.getJdbcConnection() != null)
    {
      return curThread.getJdbcConnection();
    }

    UConnection u_con = UJCIManager.connectDefault();
    CUBRIDConnection con = new CUBRIDConnection(u_con,
        "jdbc:default:connection:", "default", true);
    curThread.setJdbcConnection(con);

    return con;
#else
    return null;
#endif
  }

  public boolean acceptsURL(String url) throws SQLException
  {
    if (url == null)
      return false;
    return url.toLowerCase().startsWith(CUBRID_JDBC_URL_HEADER)
        || url.toLowerCase().startsWith(JDBC_DEFAULT_CONNECTION);
  }

  public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
      throws SQLException
  {
    return new DriverPropertyInfo[0];
  }

  public int getMajorVersion()
  {
    return major_version;
  }

  public int getMinorVersion()
  {
    return minor_version;
  }

  public boolean jdbcCompliant()
  {
    return true;
  }

  private Properties make_param_info(String paramStr) throws CUBRIDException
  {
    Properties paramInfo = new Properties();

    if (paramStr == null)
      return paramInfo;

    int index = paramStr.indexOf('?');
    if (index >= 0)
    {
      paramStr = paramStr.substring(index + 1);
    }

    do
    {
      String name, value, s;

      index = paramStr.indexOf('&');
      if (index < 0)
      {
	index = paramStr.indexOf(';');
      }
      if (index < 0)
      {
        s = paramStr;
        paramStr = null;
      }
      else
      {
        s = paramStr.substring(0, index);
        paramStr = paramStr.substring(index + 1);
      }

      index = s.indexOf('=');
      if (index >= 0)
      {
        name = s.substring(0, index).trim();
        value = s.substring(index + 1).trim();

        boolean match = false;
        for (int i = 0; i < params.length; i++)
        {
          if (name.equals(params[i]))
            match = true;
        }
        if (!match || name.length() <= 0)
          throw new CUBRIDException(CUBRIDJDBCErrorCode.invalid_url,
				    " unknown property " + s);
	else
          paramInfo.setProperty(name, value);
      }
    } while (paramStr != null);

    return paramInfo;
  }
}
