/*
 * Copyright (C) 2008 Search Solution Corporation. All rights reserved by Search Solution. 
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met: 
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *   this list of conditions and the following disclaimer. 
 *
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution. 
 *
 * - Neither the name of the <ORGANIZATION> nor the names of its contributors 
 *   may be used to endorse or promote products derived from this software without 
 *   specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
 * OF SUCH DAMAGE. 
 *
 */

package @CUBRID_DRIVER@;

import java.sql.*;
import javax.sql.*;

import @CUBRID_DRIVER@.CUBRIDConnectionWrapperPooling;
import @CUBRID_DRIVER@.CUBRIDException;
import @CUBRID_DRIVER@.CUBRIDJDBCErrorCode;

import java.util.*;

import @CUBRID_JCI@.*;

public class CUBRIDPooledConnection implements PooledConnection
{
  protected UConnection u_con;
  protected boolean isClosed;
  protected CUBRIDConnection curConnection;

  private Vector eventListeners;

  protected CUBRIDPooledConnection ()
  {
    curConnection = null;
    eventListeners = new Vector ();
    isClosed = false;
  }

  protected CUBRIDPooledConnection (UConnection c)
  {
    this ();
    u_con = c;
  }

  /*
   * javax.sql.PooledConnection interface
   */

  synchronized public Connection getConnection () throws SQLException
  {
    if (isClosed)
      {
	throw new CUBRIDException (CUBRIDJDBCErrorCode.
				   pooled_connection_closed);
      }

    if (curConnection != null)
        curConnection.closeConnection ();

    if (u_con.check_cas () == false)
      {
	u_con.reset_connection ();
      }

    curConnection =
      new CUBRIDConnectionWrapperPooling (u_con, null, null, this);
    return curConnection;
  }

  synchronized public void close () throws SQLException
  {
    if (isClosed)
      return;
    isClosed = true;
    if (curConnection != null)
      curConnection.closeConnection ();
    u_con.close ();
    eventListeners.clear ();
  }

  synchronized public void addConnectionEventListener (ConnectionEventListener
						       listener)
  {
    if (isClosed)
      {
	return;
      }

    eventListeners.addElement (listener);
  }

  synchronized public void
    removeConnectionEventListener (ConnectionEventListener listener)
  {
    if (isClosed)
      {
	return;
      }

    eventListeners.removeElement (listener);
  }

  synchronized void notifyConnectionClosed ()
  {
    curConnection = null;
    ConnectionEvent e = new ConnectionEvent (this);

    for (int i = 0; i < eventListeners.size (); i++)
      {
	((ConnectionEventListener) eventListeners.elementAt (i)).
	  connectionClosed (e);
      }
  }

  synchronized void notifyConnectionErrorOccurred (SQLException ex)
  {
    curConnection = null;
    ConnectionEvent e = new ConnectionEvent (this, ex);

    for (int i = 0; i < eventListeners.size (); i++)
      {
	((ConnectionEventListener) eventListeners.elementAt (i)).
	  connectionErrorOccurred (e);
      }
  }

#ifdef JDK6
/* JDK 1.6 */
  public void addStatementEventListener (StatementEventListener listener)
  {
    throw new java.lang.UnsupportedOperationException ();
  }

/* JDK 1.6 */
  public void removeStatementEventListener (StatementEventListener listener)
  {
    throw new java.lang.UnsupportedOperationException ();
  }
#endif

}
