/*
 * Copyright (C) 2008 Search Solution Corporation. All rights reserved by Search Solution.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of the <ORGANIZATION> nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

package cubrid.jdbc.driver;

import java.sql.*;
import java.util.Properties;
import java.util.ArrayList;
import java.util.StringTokenizer;
import cubrid.jdbc.driver.*;
import cubrid.jdbc.jci.*;

#ifdef SERVER_SIDE_JDBC
 import com.cubrid.jsp.ExecuteThread;
#endif

/**
 * Title: CUBRID JDBC Driver Description:
 *
 * @version 2.0
 */

public class CUBRIDDriver implements Driver
{
  // version
  public static final int major_version = JDBC_DRIVER_MAJOR_VERSION;
  public static final int minor_version = JDBC_DRIVER_MINOR_VERSION;
  public static final int patch_version = JDBC_DRIVER_PATCH_VERSION;

#define makestr(s) #s
#define str(s) makestr(s)

  static final String build_serial_number = str(JDBC_DRIVER_SERIAL_NUMBER);

  // default connection informations
  static final String default_hostname = "localhost";
  static final int default_port = 3456;
  static final String default_user = "public";
  static final String default_password = "";

  private final static String CONNECTION_PROPERTY_CHARSET = "charset";
  private final static String CONNECTION_PROPERTY_ALTERNATIVE_HOSTS = "althosts";

  /*
   * Class.forName("cubrid.jdbc.driver.CUBRIDDriver")로 등록 가능하도록 static
   * initializer를 통해서 DriverManager에 이 driver를 등록한다.
   */
  static
  {
    try
    {
      DriverManager.registerDriver(new CUBRIDDriver());
    }
    catch (SQLException e)
    {
    }
  }

  /*
   * Class.forName("cubrid.jdbc.driver.CUBRIDDriver")로 등록 가능하도록 static
   * initializer를 통해서 DriverManager에 이 driver를 등록한다.
   */
  static
  {
    try
    {
      DriverManager.registerDriver(new CUBRIDDriver());
    }
    catch (SQLException e)
    {
    }
  }

  /*
   * java.sql.Driver interface
   */

  /*
   * CUBRID JDBC Driver의 url이 아니면 null을 return한다. CUBRID JDBC Driver의
   * url이지만, 오류가 있으면 SQLException을 발생시킨다.
   */
  public Connection connect(String url, Properties info) throws SQLException
  {
    String hostname, db_name, user, passwd, dummy;
    int port;
    Properties paramInfo;
    UConnection u_con;

    // CUBRID JDBC Driver의 url인지 확인한다.
    if (!acceptsURL(url))
      return null;

    if (url.toLowerCase().startsWith("jdbc:default:connection:"))
    {
      return defaultConnection();
    }
    else
    {
      // parsing the url
      try
      {
        dummy = url.substring(12);
        hostname = dummy.substring(0, dummy.indexOf(':'));
        if (hostname.length() == 0)
          hostname = default_hostname;

        dummy = dummy.substring(dummy.indexOf(':') + 1);
        if (dummy.indexOf(':') > 0)
          port = Integer.valueOf(dummy.substring(0, dummy.indexOf(':')))
              .intValue();
        else
          port = default_port;

        dummy = dummy.substring(dummy.indexOf(':') + 1);
        db_name = dummy.substring(0, dummy.indexOf(':'));
        if (db_name.length() == 0)
          db_name = null;

        dummy = dummy.substring(dummy.indexOf(':') + 1);
        user = dummy.substring(0, dummy.indexOf(':'));
        if (user.length() == 0)
          user = null;

        dummy = dummy.substring(dummy.indexOf(':') + 1);
        passwd = dummy.substring(0, dummy.indexOf(':'));
        if (passwd.length() == 0)
          passwd = null;

        dummy = dummy.substring(dummy.indexOf(':') + 1);
        paramInfo = make_param_info(dummy);
      }
      catch (Exception e)
      {
        throw new CUBRIDException(CUBRIDJDBCErrorCode.invalid_url);
      }

      // getting informations from the Properties object
      dummy = info.getProperty("user");
      if (dummy != null)
      {
        user = dummy;
      }
      dummy = info.getProperty("password");
      if (dummy != null)
      {
        passwd = dummy;
      }

      if (db_name == null)
      {
        throw new CUBRIDException(CUBRIDJDBCErrorCode.no_dbname);
      }

      if (user == null)
      {
        user = default_user;
      }
      if (passwd == null)
      {
        passwd = default_password;
      }

      dummy = info.getProperty(CONNECTION_PROPERTY_ALTERNATIVE_HOSTS);
      if (dummy == null)
      {
        dummy = paramInfo.getProperty(CONNECTION_PROPERTY_ALTERNATIVE_HOSTS);
      }
      if (dummy == null)
      {
        u_con = UJCIManager.connect(hostname, port, db_name, user, passwd);

      }
      else
      {
        ArrayList aConList, aCon;
      	String hostname2;
      	int port2;

        aCon = new ArrayList();
      	aCon.add(hostname);
      	aCon.add(new Integer(port));

      	aConList = new ArrayList();
      	aConList.add(0,aCon);

      	StringTokenizer st = new StringTokenizer(dummy, ",", false);
      	while (st.hasMoreTokens())
      	{
      	  String stToken = st.nextToken();
      	  hostname2 = stToken.substring(0, stToken.indexOf(':'));
      	  stToken = stToken.substring(stToken.indexOf(':')+1);
      	  port2 = (stToken == null) ? default_port : Integer.valueOf(stToken).intValue();

      	  aCon = new ArrayList();
      	  aCon.add(hostname2);
      	  aCon.add(new Integer(port2));

      	  aConList.add(aCon);
      	}
      	u_con = UJCIManager.connect(aConList, db_name, user, passwd);
      }
      dummy = info.getProperty(CONNECTION_PROPERTY_CHARSET);
      if (dummy == null)
      {
        dummy = paramInfo.getProperty(CONNECTION_PROPERTY_CHARSET);
      }
      if (dummy != null)
      {
        try
        {
          u_con.setCharset(dummy);
        }
        catch (java.io.UnsupportedEncodingException e)
        {
          throw new SQLException("UnsupportedEncodingException : " + dummy);
        }
      }
    }

    return new CUBRIDConnection(u_con, url, user);
  }

  public Connection defaultConnection() throws SQLException
  {
#ifdef SERVER_SIDE_JDBC
    ExecuteThread curThread = (ExecuteThread) Thread.currentThread();
    if (curThread.getJdbcConnection() != null)
    {
      return curThread.getJdbcConnection();
    }

    UConnection u_con = UJCIManager.connectDefault();
    CUBRIDConnection con = new CUBRIDConnection(u_con,
        "jdbc:default:connection:", "default", true);
    curThread.setJdbcConnection(con);

    return con;
#else
    return null;
#endif
  }

  public boolean acceptsURL(String url) throws SQLException
  {
    if (url == null)
      return false;
    return url.toLowerCase().startsWith("jdbc:cubrid:")
        || url.toLowerCase().startsWith("jdbc:cubrid:")
        || url.toLowerCase().startsWith("jdbc:default:connection:");
  }

  public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)
      throws SQLException
  {
    return new DriverPropertyInfo[0];
  }

  public int getMajorVersion()
  {
    return major_version;
  }

  public int getMinorVersion()
  {
    return minor_version;
  }

  public boolean jdbcCompliant()
  {
    return true;
  }

  private Properties make_param_info(String paramStr)
  {
    Properties paramInfo = new Properties();

    if (paramStr == null)
      return paramInfo;

    int index = paramStr.indexOf('?');
    if (index >= 0)
    {
      paramStr = paramStr.substring(index + 1);
    }

    do
    {
      String name, value, s;

      index = paramStr.indexOf('&');
      if (index < 0)
      {
        s = paramStr;
        paramStr = null;
      }
      else
      {
        s = paramStr.substring(0, index);
        paramStr = paramStr.substring(index + 1);
      }

      index = s.indexOf('=');
      if (index >= 0)
      {
        name = s.substring(0, index).trim();
        value = s.substring(index + 1).trim();

        if (name.length() > 0 && value.length() > 0)
          paramInfo.setProperty(name, value);
      }
    } while (paramStr != null);

    return paramInfo;
  }
}
